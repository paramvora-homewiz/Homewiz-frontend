import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''

const supabase = createClient(supabaseUrl, supabaseKey)

async function testRoomCreationFlow() {
  console.log('üß™ Testing room creation flow...\n')
  
  try {
    // 1. Get a test building
    const { data: buildings } = await supabase
      .from('buildings')
      .select('building_id, building_name')
      .limit(1)
      
    if (!buildings || buildings.length === 0) {
      console.log('‚ùå No buildings found in database')
      return
    }
    
    const testBuilding = buildings[0]
    console.log('Using test building:', testBuilding.building_name, `(${testBuilding.building_id})`)
    
    // 2. Create a test room
    const testRoomData = {
      room_number: 'TEST-' + Date.now(),
      building_id: testBuilding.building_id,
      status: 'AVAILABLE',
      private_room_rent: 1000,
      maximum_people_in_room: 1,
      bed_count: 1,
      ready_to_rent: true
    }
    
    console.log('\nüìù Creating test room with data:', testRoomData)
    
    const { data: createdRoom, error: createError } = await supabase
      .from('rooms')
      .insert(testRoomData)
      .select()
      .single()
      
    if (createError) {
      console.error('‚ùå Error creating room:', createError)
      return
    }
    
    console.log('‚úÖ Room created successfully!')
    console.log('Generated room_id:', createdRoom.room_id)
    console.log('Room ID pattern:', createdRoom.room_id.split('_').slice(0, 2).join('_') + '_...')
    
    // 3. Test image path
    const imagePath = `buildings/${createdRoom.building_id}/rooms/${createdRoom.room_id}/images/test.jpg`
    console.log('\nüì∏ Expected image storage path:')
    console.log(imagePath)
    
    // 4. Clean up - delete test room
    console.log('\nüßπ Cleaning up test room...')
    const { error: deleteError } = await supabase
      .from('rooms')
      .delete()
      .eq('room_id', createdRoom.room_id)
      
    if (deleteError) {
      console.log('‚ö†Ô∏è Could not delete test room:', deleteError.message)
    } else {
      console.log('‚úÖ Test room deleted')
    }
    
    // 5. Summary
    console.log('\nüìã SUMMARY:')
    console.log('- Room IDs are auto-generated by the database')
    console.log('- Format: Building ID + Room Number (e.g., BLDG_1080_FOLSOM_R001)')
    console.log('- Images should be stored using these database-generated IDs')
    console.log('- The frontend should not generate its own IDs')
    
  } catch (error) {
    console.error('‚ùå Unexpected error:', error)
  }
}

testRoomCreationFlow()